#!/usr/bin/env node
'use strict';

/**
 * Module dependencies.
 */

const fs = require('fs');
const path = require('path');
const eventEmitter = require('../modules/roEventEmitter');
const app = require('../app');
const http = require('http');
const https = require('https');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
var httpsPort = `${Number.parseInt(port) + 433}`;

app.set('port', port);
app.set('httpsPort', httpsPort);

/**
 * Create HTTP server.
 */

var isReady = false;
var server = http.createServer(app);
var httpsServer = https.createServer({
  key: fs.readFileSync(path.resolve(__dirname, '../resources/private.pem')).toString(),
  cert: fs.readFileSync(path.resolve(__dirname, '../resources/certificate.cert')).toString()
}, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

httpsServer.listen(httpsPort);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

httpsServer.on('close', () => isReady = false);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(port) {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + port;
  isReady = true;
  eventEmitter.emit('service_ready');
  console.log('Server start listenin');
}

module.exports = {
  service: app,
  server: server,
  isReady: () => { return isReady },
  eventEmitter: eventEmitter
};